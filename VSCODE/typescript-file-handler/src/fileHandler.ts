import * as fs from 'fs'; // Import the built-in 'fs' module for file operations.

/**
 * Class to handle file operations such as reading, writing, and updating files.
 */
export default class FileHandler {
  private filePath: string; // Private property to store the file path.

  /**
   * Constructor to initialize the file path.
   * @param {string} filePath - The path of the file to operate on.
   */
  constructor(filePath: string) {
    this.filePath = filePath; // Assign the file path to the instance property.
  }

  /**
   * Write data to the file. If the file exists, it will be overwritten.
   * @param {string} data - The content to write to the file.
   */
  writeFile(data: string): void {
    fs.writeFileSync(this.filePath, data, 'utf8'); // Write data synchronously to the file with UTF-8 encoding.
    console.log(`File written successfully: ${this.filePath}`); // Log success message with file path.
  }

  /**
   * Read and return the content of the file.
   * @returns {string} - The content of the file or an empty string if the file does not exist.
   */
  readFile(): string {
    if (!fs.existsSync(this.filePath)) { // Check if the file exists before reading.
      console.error('File does not exist.'); // Log error if file is missing.
      return ''; // Return an empty string if the file does not exist.
    }
    return fs.readFileSync(this.filePath, 'utf8'); // Read and return the file content synchronously in UTF-8 encoding.
  }

  /**
   * Append new data to the existing file. If the file does not exist, create it.
   * @param {string} data - The content to append to the file.
   */
  updateFile(data: string): void {
    if (!fs.existsSync(this.filePath)) { // Check if the file exists.
      console.error('File does not exist. Creating a new one.'); // Log message indicating new file creation.
      this.writeFile(data); // Create and write new file if it doesn't exist.
    } else {
      fs.appendFileSync(this.filePath, '\n' + data, 'utf8'); // Append data to the file with a newline separator.
      console.log(`File updated successfully: ${this.filePath}`); // Log success message.
    }
  }

  /**
   * Generate an HTML file with predefined content.
   */
  generateHTML(): void {
    const htmlContent = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Generated HTML</title>
          <script src="script.js"></script>
      </head>
      <body>
          <h1>Hello from TypeScript!</h1>
          <p>This HTML file was generated by the TypeScript program.</p>
      </body>
      </html>
    `; // Define the HTML content as a template string.

    this.writeFile(htmlContent); // Call writeFile method to create the HTML file with the content.
  }
}

// Instantiate the FileHandler class with 'index.html' as the target file.
const htmlHandler = new FileHandler('index.html');

// Call the method to generate the HTML file.
htmlHandler.generateHTML();

// Log a success message indicating the HTML file creation.
console.log('HTML file created successfully.');
