"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
class FileHandler {
    constructor(filePath) {
        this.filePath = filePath;
    }
    // Write data to file (overwrites if file exists)
    writeFile(data) {
        fs.writeFileSync(this.filePath, data, 'utf8');
        console.log(`File written successfully: ${this.filePath}`);
    }
    // Read data from file
    readFile() {
        if (!fs.existsSync(this.filePath)) {
            console.error('File does not exist.');
            return '';
        }
        return fs.readFileSync(this.filePath, 'utf8');
    }
    // Append new data to file
    updateFile(data) {
        if (!fs.existsSync(this.filePath)) {
            console.error('File does not exist. Creating a new one.');
            this.writeFile(data);
        }
        else {
            fs.appendFileSync(this.filePath, '\n' + data, 'utf8');
            console.log(`File updated successfully: ${this.filePath}`);
        }
    }
    // Generate an HTML file
    generateHTML() {
        const htmlContent = `
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>Generated HTML</title>
          <script src="script.js"></script>
      </head>
      <body>
          <h1>Hello from TypeScript!</h1>
          <p>This HTML file was generated by the TypeScript program.</p>
      </body>
      </html>
    `;
        this.writeFile(htmlContent);
    }
}
exports.default = FileHandler;
// Generate the HTML file
const htmlHandler = new FileHandler('index.html');
htmlHandler.generateHTML();
console.log('HTML file created successfully.');
